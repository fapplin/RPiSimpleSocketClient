package simplesocketclient;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.net.Socket;
import javax.swing.JOptionPane;

public class SimpleSocketClientFrame extends javax.swing.JFrame {

    //These are the streams we will use to
    //communicate through our socket.
    private BufferedReader in;
    private PrintWriter out;

    public SimpleSocketClientFrame() {
        initComponents();
        jLabelSocketServerButton.setVisible(false);
        jButtonSendSocketMessage.setVisible(false);
        jButtonShutdownSocketServer.setVisible(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButtonConnectToSocketServer = new javax.swing.JButton();
        jButtonSendSocketMessage = new javax.swing.JButton();
        jButtonCloseFrame = new javax.swing.JButton();
        jLabelSocketServerButton = new javax.swing.JLabel();
        jButtonShutdownSocketServer = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jButtonConnectToSocketServer.setText("Connect To Socket Server");
        jButtonConnectToSocketServer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonConnectToSocketServerActionPerformed(evt);
            }
        });

        jButtonSendSocketMessage.setText("Send Socket Message");
        jButtonSendSocketMessage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSendSocketMessageActionPerformed(evt);
            }
        });

        jButtonCloseFrame.setText("Close");
        jButtonCloseFrame.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCloseFrameActionPerformed(evt);
            }
        });

        jLabelSocketServerButton.setText("Socket Server Button was clicked!");

        jButtonShutdownSocketServer.setText("Shut Down Socket Server");
        jButtonShutdownSocketServer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonShutdownSocketServerActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jButtonCloseFrame)
                        .addGap(160, 160, 160))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jButtonSendSocketMessage, javax.swing.GroupLayout.PREFERRED_SIZE, 215, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButtonShutdownSocketServer))
                        .addGap(93, 93, 93))))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(90, 90, 90)
                        .addComponent(jButtonConnectToSocketServer))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(82, 82, 82)
                        .addComponent(jLabelSocketServerButton)))
                .addContainerGap(83, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(32, 32, 32)
                .addComponent(jButtonConnectToSocketServer)
                .addGap(22, 22, 22)
                .addComponent(jLabelSocketServerButton)
                .addGap(26, 26, 26)
                .addComponent(jButtonSendSocketMessage)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 67, Short.MAX_VALUE)
                .addComponent(jButtonShutdownSocketServer)
                .addGap(26, 26, 26)
                .addComponent(jButtonCloseFrame)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonConnectToSocketServerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonConnectToSocketServerActionPerformed
        try {

            //This is the address of the server program
            //located on the Raspberry Pi.
            String serverAddress = "192.168.1.105";

            //Create a new socket between this
            //client and the server program.
            Socket socket = new Socket(serverAddress, 9898);

            //Set up the streams to be used by the
            //socket for input and output.
            in = new BufferedReader(
                    new InputStreamReader(socket.getInputStream()));
            out = new PrintWriter(socket.getOutputStream(), true);

            jButtonShutdownSocketServer.setVisible(true);

            //Start a thread that is just checking
            //the socket for a message from the server
            //telling us the button wired to the
            //Raspberry Pi has been pressed.
            ButtonClickReceivedThread w;

            w = new ButtonClickReceivedThread(socket, jLabelSocketServerButton, jButtonSendSocketMessage);
            Thread t = new Thread(w);
            t.start();

        } catch (IOException ex) {
            JOptionPane.showMessageDialog(null, ex.getMessage());
        }
    }//GEN-LAST:event_jButtonConnectToSocketServerActionPerformed

    private void jButtonSendSocketMessageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSendSocketMessageActionPerformed
        try {
            //Sending a message to the socket server.
            out.println("Sending a message to the Socket Server");
            
            //Reading the message that the server send back.
            String fromSocketServer = in.readLine();
            
            //Display the message in a message box.
            JOptionPane.showMessageDialog(null, fromSocketServer);
        } catch (IOException ex) {
            System.out.println("Exception: " + ex.getMessage());
        }
    }//GEN-LAST:event_jButtonSendSocketMessageActionPerformed

    private void jButtonCloseFrameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCloseFrameActionPerformed
        dispose();
        System.exit(0); //calling the method is a must
    }//GEN-LAST:event_jButtonCloseFrameActionPerformed

    private void jButtonShutdownSocketServerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonShutdownSocketServerActionPerformed
        //Send a message to the socket server to shut down
        //the server.
        out.println("shutdown_server");
    }//GEN-LAST:event_jButtonShutdownSocketServerActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(SimpleSocketClientFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(SimpleSocketClientFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(SimpleSocketClientFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SimpleSocketClientFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new SimpleSocketClientFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonCloseFrame;
    private javax.swing.JButton jButtonConnectToSocketServer;
    private javax.swing.JButton jButtonSendSocketMessage;
    private javax.swing.JButton jButtonShutdownSocketServer;
    private javax.swing.JLabel jLabelSocketServerButton;
    // End of variables declaration//GEN-END:variables
}
